"""
general functions for collecting clamlab event ping files generated by bonsai
"""


# basic definitions:
# sub-session: individual bonsai session for a subject
# session: all sub-sessions for a subject, in a given day


from collections import defaultdict
import pandas as pd
from pyfun.customdict import AddOnlyDict
import os, glob
import pyfun.timestrings as timestr



def get_subsess_paths(animal_name, animal_root, verbose=False):
    """
    scrape data folder for one animal, and return all the corresponding data files, grouped by timestamp
    It is assumed that the file structure is:

    animal_id/datetime/results/*.csv

    :param animal_folder: path to data folder containing all sessions belonging to one animal
    :return:
    """


    subsess_paths = defaultdict(AddOnlyDict)

    subfolders = [[f.name, f.path] for f in os.scandir(animal_root) if f.is_dir()]

    for [fd_name, fd_path] in subfolders:

        fd_dateinfo = timestr.search(fd_name)  # search for a timestamp in folder name
        if fd_dateinfo is None:
            if verbose:
                print(fd_name, fd_path)
            continue  # folder is not a sub-session folder

        # ==grab all csv files in results for of each sub-session
        fd_path = os.path.join(fd_path, 'results')
        file_searchstr = os.path.join(fd_path, '*.csv')
        filenames = [os.path.basename(f) for f in glob.glob(file_searchstr)]

        for fn in filenames:
            file_dateinfo = timestr.search(fn)  # find time string in filename

            if file_dateinfo is None:  # no timestring found, ignore file
                if verbose:
                    print(fn)
                continue

            # ===check that timestamp of file is later than timestamp of folder
            if fd_dateinfo[1] > file_dateinfo[1]:
                print(os.path.join(fd_path, fn))
                raise ValueError(
                    "Error! File {} \noccurs earlier than folder {} ".format(file_dateinfo[0], fd_dateinfo[0]))

            file_type, file_animal_name = fn.split('_')[0:2]

            # ===check that animal_name matches===
            if file_animal_name.upper() != animal_name:
                print(os.path.join(fd_path, fn))
                raise ValueError("Error! Filename {} found in folder {}".format(file_animal_name, animal_name))

            subsess_name = file_dateinfo[0]
            subsess_paths[subsess_name][file_type] = os.path.join(fd_path, fn)

    return subsess_paths
